#!/usr/bin/env bash

###############################################################################
# CONSTITUTION: Updated and extended version off Mina Markham's great formation 
# https://github.com/minamarkham/formation
###############################################################################


###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "╭─────────────────────────╮\n| \e[31m\033[0m Constitution failed \e[31m\033[0m |\n╰─────────────────────────╯\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# TWIRL: Check for required functions file
###############################################################################

if [ -e twirl ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "twirl"
else
	printf "╭──────────────────────────╮\n| \e[31m\033[0m ./twirl not found 💃🏾 \e[31m\033[0m |\n╰──────────────────────────╯\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Follow the constitution      http://patorjk.com/software/taag/ (ansi regular)
###############################################################################

printf "
 ██████  ██████  ███    ██ ███████ ████████ ██ ████████ ██    ██ ████████ ██  ██████  ███    ██ 
██      ██    ██ ████   ██ ██         ██    ██    ██    ██    ██    ██    ██ ██    ██ ████   ██ 
██      ██    ██ ██ ██  ██ ███████    ██    ██    ██    ██    ██    ██    ██ ██    ██ ██ ██  ██ 
██      ██    ██ ██  ██ ██      ██    ██    ██    ██    ██    ██    ██    ██ ██    ██ ██  ██ ██ 
 ██████  ██████  ██   ████ ███████    ██    ██    ██     ██████     ██    ██  ██████  ██   ████ 
                                                                                                
                                                                                                
          
╭───────────────────────────────────────────────────╮
│  Get ready and follow the constitution.           │
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
│  Dotfiles will be linked, app settings will       │
│  be synced via mackup                             │
╰───────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# PROMPT: Password
###############################################################################
#chapter "Caching password…"
#ask_for_sudo

###############################################################################
# CHECK: Internet, Updates, Filevault, Command line tools
###############################################################################
chapter "Checking basic configuration"

# -----------------------------------------------------------------------------
# Internet connection and quality
# -----------------------------------------------------------------------------
step "Checking internet connection…"
check_internet_connection

	if ask "Would you like to check the network quality" N; then
		networkQuality
	else
		print_success_muted "Fine - moving on.";
	fi

step "Check command line tools"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

#if [ ! -d "$HOME/.bin/" ]; then
#	mkdir "$HOME/.bin"
#fi

# -----------------------------------------------------------------------------
# System updates
# -----------------------------------------------------------------------------
step "Checking for system software updates…"

if ask "Would you like to check for system software updates?" N; then
		check_software_update
	else
		print_success_muted "Fine - moving on.";
	fi



###############################################################################
# PROMPT: SSH Key
###############################################################################
#chapter 'Checking for SSH key…'
#ssh_key_setup

# -----------------------------------------------------------------------------
# Filevault should be active
# -----------------------------------------------------------------------------

step "Check FileVault Status"
check_filevault_status

# -----------------------------------------------------------------------------
# Computer Name
# -----------------------------------------------------------------------------

step "Computer Name"
check_computer_name

###############################################################################
# INSTALL: Dependencies
###############################################################################


# -----------------------------------------------------------------------------
# Bash-it
# -----------------------------------------------------------------------------
#if [ -d "$HOME/.bash_it" ]; then
#	print_success_muted "Bash-it already installed. Skipping."
#else
#	step "Installing Bash-it…"
#	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
#	~/.bash_it/install.sh --silent --no-modify-config
#	print_success "Bash-it installed!"
#fi

# -----------------------------------------------------------------------------
# NVM
# -----------------------------------------------------------------------------
# if [ -x nvm ]; then
# #	step "Installing NVM…"
# 	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
# 	print_success "NVM installed!"
# 	step "Installing latest Node…"
# 	nvm install node
# 	nvm use node
# 	nvm run node --version
# 	nodev=$(node -v)
# 	print_success "Using Node $nodev!"
# else
# 	print_success_muted "NVM/Node already installed. Skipping."
# fi

# -----------------------------------------------------------------------------
# Homebrew setup
# -----------------------------------------------------------------------------
step "Check if Homebrew is installed and ready"
if ! [ -x "$(command -v brew)" ]; then
    echo_install "Installing Homebrew" 
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"	


	[ -d "/opt/homebrew" ] && HOMEBREW_PREFIX="/opt/homebrew" || HOMEBREW_PREFIX="/usr/local"
	eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"
	
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. "
fi

if $(brew doctor > /dev/null 2>&1); then
    print_success "Homebrew Doctor check passed. "
else	
    print_error "Homebrew doctor isn't happy. Please fix the issues and start over.\n \n"
	brew doctor
	print_error "Please fix the issues and start over."
	exit 1
fi

step "Looking for Brew updates"
brew update > /dev/null && print_success "Repository updated"



###############################################################################
# INSTALL APPS
###############################################################################

chapter "Installing Apps"


if [ -e $cwd/swag/brews ]; then
	step "Installing Homebrew formulae:"

	for brew in $(grep -E -ve '^[[:space:]]*$|^#*' $cwd/swag/brews); do
	    install_brews $brew
	done
fi




###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/swag/casks ]; then
	step "Installing Homebrew casks:"

	for cask in $(grep -E -ve '^[[:space:]]*$|^#*' $cwd/swag/casks); do
	    install_casks $cask
	done
fi
exit 0


# -----------------------------------------------------------------------------
# Homebrew updates and cleaning up
# -----------------------------------------------------------------------------

step "Updating Homebrew installations and clean up"
brew upgrade
brew cleanup

exit 0

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
step "Installing apps from App Store…"
if [ -x mas ]; then

	print_warning "Please install mas-cli first: brew mas. Skipping."

	else

	if [ -e $cwd/swag/apps ]; then
		if mas_setup; then
			# Workaround for associative array in Bash 3
			# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
			for app in $(<$cwd/swag/apps); do
				KEY="${app%%::*}"
				VALUE="${app##*::}"
				install_application_via_app_store $KEY $VALUE
			done
		else
			print_warning "Please signin to App Store first. Skipping."
		fi
	fi

fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files…"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/swag/npm ]; then
	chapter "Installing npm packages…"

	for pkg in $(<$cwd/swag/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
fi


###############################################################################
# OPTIONAL: Customizations
###############################################################################
chapter "Adding hot sauce…"
if [ -f "$HOME/.hot-sauce" ]; then
	if ask "Do you want to add hot sauce?" Y; then
		. "$HOME/.hot-sauce"; printf "\n  You got hot sauce in your bag. 🔥 ${bold}Swag.${normal}\n";
	else
		print_success_muted "Hot sauce declined. Skipped.";
	fi
else
	print_warning "No ~/.hot-sauce found. Skipping."
fi

###############################################################################
# 🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋
###############################################################################
e_lemon_ated
